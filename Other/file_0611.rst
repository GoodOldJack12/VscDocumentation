Inline code with <code>...</code>
---------------------------------

We used inline code on the old vscentrum.be to clearly mark system
commands etc. in text.

-  For this we used the <code> tag.
-  There was support in the editor to set this tag
-  It doesn't seem to work properly in the current editor. If the
   fragment of code contains a slash (/), the closing tag gets omitted.

Example: At UAntwerpen you'll have to use ``module avail MATLAB`` and
``module load MATLAB/2014a`` respectively.

However, If you enter both <code>-blocks on the same line in a HTML
file, the editor doesn't process them well: ``module avail MATLAB`` and
<code>module load MATLAB.

Test: ``test 1`` en ``test 2``.

Code in <pre>...</pre>
----------------------

This was used a lot on the old vscentrum.be site to display fragments of
code or display output in a console windows.

-  Readability of fragments is definitely better if a fixed width font
   is used as this is necessary to get a correct alignment.
-  Formatting is important: Line breaks should be respected. The problem
   with the CMS seems to be that the editor respects the line breaks,
   the database also stores them as I can edit the code again, but the
   CMS removes them when generating the final HTML-page as I don't see
   the line breaks again in the resulting HTML-code that is loaded into
   the browser.

::

   #!/bin/bash -l
   #PBS -l nodes=1:nehalem
   #PBS -l mem=4gb
   module load matlab
   cd $PBS_O_WORKDIR
   ...

And this is a test with a very long block:

::

   ln03-1003: monitor -h
   ### usage: monitor [-d <delta>] [-l <logfile>] [-f <files>]
   # [-h] [-v] <cmd> | -p <pid>
   # Monitor can be used to sample resource utilization of a process
   # over time. Monitor can sample a running process if the latter's PID
   # is specified using the -p option, or it can start a command with
   # parameters passed as arguments. When one has to specify flags for
   # the command to run, '--' can be used to delimit monitor's options, e.g.,
   # monitor -delta 5 -- matlab -nojvm -nodisplay calc.m
   # Resources that can be monitored are memory and CPU utilization, as
   # well as file sizes.
   # The sampling resolution is determined by delta, i.e., monitor samples
   # every <delta> seconds.
   # -d <delta> : sampling interval, specified in
   # seconds, or as [[dd:]hh:]mm:ss
   # -l <logfile> : file to store sampling information; if omitted,
   # monitor information is printed on stderr
   # -n <lines> : retain only the last <lines> lines in the log file,
   # note that this option only makes sense when combined
   # with -l, and that the log file lines will not be sorted
   # according to time
   # -f <files> : comma-separated list of file names that are monitored
   # for size; if a file doesn't exist at a given time, the
   # entry will be 'N/A'
   # -v : give verbose feedback
   # -h : print this help message and exit
   # <cmd> : actual command to run, followed by whatever
   # parameters needed
   # -p <pid> : process ID to monitor
   #
   # Exit status: * 65 for any montor related error
   # * exit status of <cmd> otherwise
   # Note: if the exit code 65 conflicts with those of the
   # command to run, it can be customized by setting the
   # environment variables 'MONITOR_EXIT_ERROR' to any value
   # between 1 and 255 (0 is not prohibited, but this is probably.
   # not what you want).

The <code> style in the editor
------------------------------

In fact, the Code style of the editor works on a paragraph basis and all
it does is put the paragraph between <pre> and </pre>-tags, so the
problem mentioned above remains. The next text was edited in WYSIWIG
mode:

::

   #!/bin/bash -l
   #PBS -l nodes=4:ivybridge
   ...

Another editor bug is that it isn't possible to switch back to regular
text mode at the end of a code fragment if that is at the end of the
text widget: The whole block is converted back to regular text instead
and the formatting is no longer shown.

"
